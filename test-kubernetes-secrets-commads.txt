
apt-get update && apt-get install -y mysql-client

Create a secret named my-registry-secret to store your Docker Hub credentials:

kubectl create secret docker-registry my-registry-secret \
  --docker-server=https://index.docker.io/v1/ \
  --docker-username=srikantb1 \
  --docker-password=dckr_pat_FIsZePNH1DzR2lvWQCJmmWzEB3I \
  --docker-email=srikantbagewadi@gmail.com

________________________________________
Apply the Kubernetes manifests to deploy the application:
bash
Copy
kubectl apply -f mysql-deployment.yaml
kubectl apply -f todo-application-deployment.yaml
________________________________________
Check the status of the deployments, pods, and services:
bash
Copy
kubectl get deployments
kubectl get pods
kubectl get services
________________________________________

Access the Application
1.	Get the Minikube IP:
bash
Copy
minikube ip
2.	Open a browser and navigate to http://<minikube-ip>:30080 to access the todo-application.
________________________________________

Clean Up
If you want to delete the deployments and services, run:
bash
Copy
kubectl delete -f todo-application-deployment.yaml
kubectl delete -f mysql-deployment.yaml
________________________________________
________________________________________
________________________________________
________________________________________


1. Check if the User 'jenkins' is Part of the 'docker' Group
Run the following command to check if the jenkins user is part of the docker group:
bash
groups jenkins
Expected Output: jenkins should be listed in the docker group.
________________________________________
2. Check if the Docker Image todo-application-image is Created
List all Docker images to verify if todo-application-image exists:
bash
docker images
Expected Output: The todo-application-image should be listed.
________________________________________
3. Check if the Docker Image todo-application-image is Tagged Correctly with latest
Verify the tag of the Docker image:
bash
docker images | grep todo-application-image
Expected Output: The TAG column should show latest.
________________________________________
4. Check if the Docker Volume mysql-data is Created
List all Docker volumes to verify if mysql-data exists:
bash
docker volume ls
Expected Output: The mysql-data volume should be listed.
________________________________________
5. Check if the Docker Network todo-network is Created
List all Docker networks to verify if todo-network exists:
bash
docker network ls
Expected Output: The todo-network should be listed.
________________________________________
6. Check if the Application is Active in the Docker Container
Check the status of the running containers:
bash
docker ps
Expected Output: The todo-application container should be in the Up state.
________________________________________
7. Check if the MySQL Database Container mysql-db-1 Exists
Verify if the MySQL container is running:
bash
docker ps | grep mysql-db-1
Expected Output: The mysql-db-1 container should be listed.
________________________________________
8. Check if the To-Do Application Container todo-application-1 Exists
Verify if the To-Do application container is running:
bash
docker ps | grep todo-application-1
Expected Output: The todo-application-1 container should be listed.
________________________________________
9. Check if the Kubernetes Secret my-registry-secret Exists
List all Kubernetes secrets to verify if my-registry-secret exists:
bash
kubectl get secrets
Expected Output: The my-registry-secret should be listed.
________________________________________
10. Check if the Application is Running on Minikube at Port 30080
1.	Get the Minikube IP:
bash
minikube ip
2.	Open a browser and navigate to http://<minikube-ip>:30080.
Expected Output: The To-Do application should be accessible.
________________________________________
11. Check if the Application Serves the Expected Content
Verify the content served by the application:
bash
curl http://<minikube-ip>:30080
Expected Output: The response should include the expected HTML or JSON content.
________________________________________
12. Check if the Latest Build of todo-application-pipeline is Successful
1.	Go to the Jenkins dashboard.
2.	Open the todo-application-pipeline job.
3.	Check the status of the latest build.
Expected Output: The build should be marked as Successful.
________________________________________
13. Check if All Required Application Pods are in a Running State
List all pods and their status:
bash
kubectl get pods
Expected Output: All pods (e.g., todo-application and mysql-db) should be in the Running state.
________________________________________
14. Check if the Database tododb Exists in the MySQL Container
1.	Connect to the MySQL container:
bash
kubectl exec -it <mysql-pod-name> -- mysql -u root -p
Enter the password Root@123 when prompted.
2.	List all databases:
sql
SHOW DATABASES;
Expected Output: The tododb database should be listed.
________________________________________
Summary
By following the above steps, you can verify all the tasks in your assessment. Hereâ€™s a quick recap of the commands:
Task	Command
Check if jenkins is in the docker group	groups jenkins
Check if todo-application-image exists	docker images
Check if todo-application-image is tagged as latest	`docker images	grep todo-application-image`
Check if mysql-data volume exists	docker volume ls	
Check if todo-network exists	docker network ls	
Check if the application container is active	docker ps	
Check if mysql-db-1 container exists	`docker ps	grep mysql-db-1`
Check if todo-application-1 container exists	`docker ps	grep todo-application-1`
Check if my-registry-secret exists	kubectl get secrets	
Check if the application is running on Minikube at port 30080	minikube ip and open http://<minikube-ip>:30080 in a browser	
Check if the application serves expected content	curl http://<minikube-ip>:30080	
Check if the latest Jenkins build is successful	Check the Jenkins dashboard	
Check if all pods are in a Running state	kubectl get pods	
Check if the tododb database exists	kubectl exec -it <mysql-pod-name> -- mysql -u root -p and SHOW DATABASES	
This checklist ensures
